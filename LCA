// FindLCA.cpp : Defines the entry point for the console application.
//

#include <stdio.h>
#include <iostream>
#include <queue>

using namespace std;

typedef struct _Node {
    int             Value;
    struct _Node    *Left;
    struct _Node    *Right;
} Node, *PNode;

PNode CreateNode(int Value)
{
    PNode newNode = new Node;
    if (newNode == nullptr)
    {
        cout << "Failed to allocate " << sizeof(Node) << " bytes" << endl;
        return newNode;
    }
    newNode->Left = nullptr;
    newNode->Right = nullptr;
    newNode->Value = Value;
    return newNode;
}

void DFS(PNode root)
{
    if (root == nullptr)
    {
        return;
    }
    DFS(root->Left);
    cout << root->Value << "\t";
    DFS(root->Right);
}

void BFS(PNode root)
{
    queue<PNode> nodesQueue;
    nodesQueue.push(root);
    while (!nodesQueue.empty())
    {
        PNode tempNode = nodesQueue.front();
        if (tempNode->Left != nullptr)
        {
            nodesQueue.push(tempNode->Left);
        }
        if (tempNode->Right != nullptr)
        {
            nodesQueue.push(tempNode->Right);
        }
        cout << tempNode->Value << "\t";
        nodesQueue.pop();
    }
}

PNode FindLCA2(PNode Root, int Value1, int Value2, PNode *Node1, PNode *Node2, bool &HasChild1, bool &HasChild2)
{
    PNode lca = nullptr;
    bool found1 = false, found2 = false;

    if (Root == nullptr)
    {
        return lca;
    }
    if (Root->Value == Value1)
    {
        *Node1 = Root;
        found1 = true;
    }
    if (Root->Value == Value2)
    {
        *Node2 = Root;
        found2 = true;
    }
    if ((found1 == true) && (found2 == true))
    {
        // Found LCA - current node
        lca = Root;
        HasChild1 = HasChild2 = true;
    }
    
    if (lca == nullptr)
    {
        lca = FindLCA2(Root->Left, Value1, Value2, Node1, Node2, found1, found2);
    }
    if (lca == nullptr)
    {
        lca = FindLCA2(Root->Right, Value1, Value2, Node1, Node2, found1, found2);
    }
    if (found1 && found2)
    {
        // Even if we found this somewhere else, thedre may be dupes
        // We need to find LCA, so this one will be the LCA
        if ((Node1 != nullptr) && (Node2 != nullptr))
        {
            // We just found both nodes' common ancestor
            if (lca == nullptr)
            {
                lca = Root;
            }
        }
    }
    if (HasChild1 == false)
    {
        HasChild1 = found1;
    }
    if (HasChild2 == false)
    {
        HasChild2 = found2;
    }

    return lca;
}

PNode FindLCA(PNode Root, int Value1, int Value2, PNode *Node1, PNode *Node2)
{
    PNode lca = nullptr;
    bool found1 = false;
    bool found2 = false;
    if (Root == nullptr)
    {
        return nullptr;
    }
    if (Root->Value == Value1)
    {
        found1 = true;
        *Node1 = Root;
    }
    if (Root->Value == Value2)
    {
        found2 = true;
        *Node2 = Root;
    }
    if (found1 && found2)
    {
        lca = Root;
        return lca;
    }
    bool track1 = (*Node1 == nullptr);
    bool track2 = (*Node2 == nullptr);
    if (lca == nullptr)
    {
        lca = FindLCA(Root->Left, Value1, Value2, Node1, Node2);
        if ((track1 == true) && (*Node1 != nullptr))
        {
            found1 = true;
            track1 = false;
        }
        if ((track2 == true) && (*Node2 != nullptr))
        {
            found2 = true;
            track2 = false;
        }
        if (found1 && found2)
        {
            lca = Root;
        }
    }
    if (lca == nullptr)
    {
        lca = FindLCA(Root->Right, Value1, Value2, Node1, Node2);
        if ((track1 == true) && (*Node1 != nullptr))
        {
            found1 = true;
        }
        if ((track2 == true) && (*Node2 != nullptr))
        {
            found2 = true;
        }
        if (found1 && found2)
        {
            lca = Root;
        }
    }

    return lca;
}

int main()
{
    PNode rootNode = CreateNode(5);
    rootNode->Left = CreateNode(3);
    rootNode->Right = CreateNode(7);
    rootNode->Left->Left = CreateNode(2);
    rootNode->Left->Right = CreateNode(4);
    rootNode->Right->Left = CreateNode(6);
    rootNode->Right->Right = CreateNode(9);
    rootNode->Left->Left->Left = CreateNode(1);
    rootNode->Right->Right->Right = CreateNode(7);

    int target1 = 9;
    int target2 = 7;

    cout << "Depth first search: " << endl;
    DFS(rootNode);
    cout << endl << endl;

    cout << "Breadth first search: " << endl;
    BFS(rootNode);
    cout << endl << endl;

    PNode node1 = nullptr;
    PNode node2 = nullptr;
    bool hasChild1 = false;
    bool hasChild2 = false;
    PNode lca = FindLCA2(rootNode, target1, target2, &node1, &node2, hasChild1, hasChild2);
    if (lca)
    {
        cout << "Lowest common ancestor of " << target1 << " and " << target2 << ": " << lca->Value << endl;
    }
    else
    {
        cout << "At least one of " << target1 << " or " << target2 << " was NOT FOUND in the tree" << endl;
    }

    return 0;
}

